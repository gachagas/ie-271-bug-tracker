// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  sample    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                       String    @id @default(cuid())
  name                     String
  email                    String   @unique
  password                 String
  debugText                String?
  role                     Role      @default(SUBMITTER)
  sessions                 Session[]
  projectsAsProjectmanager Project[] @relation("ProjectManager")
  projectAsDeveloper       Project?  @relation(fields: [projectAsDeveloperId], references: [id])
  projectAsDeveloperId     String?
  ticketsAsDeveloper       Ticket[]  @relation("TicketSubmitter")
  ticketsAsSubmitter       Ticket[]  @relation("TicketDeveloper")
  comments                 Comment[]
}

enum Role {
  ADMIN
  PROJECT_MANAGER
  DEVELOPER
  SUBMITTER
  NONE
}

model Project {
  id               String   @id @default(cuid())
  name             String   @unique
  description      String
  projectManager   User?    @relation("ProjectManager", fields: [projectManagerId], references: [id])
  projectManagerId String?
  developers       User[]
  tickets          Ticket[]
}

model Ticket {
  id          String         @id @default(cuid())
  description String
  createDate  DateTime       @default(now())
  closeDate   DateTime
  type        TicketType
  status      TicketStatus
  priority    TicketPriority
  submitter   User           @relation("TicketSubmitter", fields: [submitterId], references: [id], onDelete: Cascade)
  submitterId String
  developer   User?          @relation("TicketDeveloper", fields: [developerId], references: [id])
  developerId String?
  comments    Comment[]
  project     Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
}

enum TicketType {
  UI_ISSUE
  API_ISSUE
  DATABASE_ISSUE
}

enum TicketStatus {
  OPEN
  CLOSED
  IN_PROGRESS
}

enum TicketPriority {
  HIGH
  MEDIUM
  LOW
}

model Comment {
  id          String   @id @default(cuid())
  message     String
  createdAt   DateTime @default(now())
  ticket      Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  ticketId    String
  commenter   User     @relation(fields: [commenterId], references: [id], onDelete: Cascade)
  commenterId String
}

// note use prisma format after saving
